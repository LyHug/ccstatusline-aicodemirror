import {
    existsSync,
    readFileSync,
    unlinkSync,
    writeFileSync
} from 'fs';
import {
    Box,
    Text,
    useInput
} from 'ink';
import TextInput from 'ink-text-input';
import { tmpdir } from 'os';
import { join } from 'path';
import React, { useState } from 'react';

import {
    checkAnthropicBaseUrl,
    getCredits,
    loadAicodemirrorConfig,
    saveAicodemirrorConfig
} from '../../utils/aicodemirror';
import {
    cleanup,
    launchBrowserLogin,
    openTextEditor,
    validateAndSaveCookie
} from '../../utils/browser-cookie';
import { getCompatibleChar } from '../../utils/unicode-compat';

export interface AicodemirrorConfigMenuProps { onBack: () => void }

export const AicodemirrorConfigMenu: React.FC<AicodemirrorConfigMenuProps> = ({ onBack }) => {
    const [selectedIndex, setSelectedIndex] = useState(0);
    const [showManualCookieMenu, setShowManualCookieMenu] = useState(false);
    const [showFileWait, setShowFileWait] = useState(false);
    const [showThresholdInput, setShowThresholdInput] = useState(false);
    const [thresholdInput, setThresholdInput] = useState('');
    const [showCacheTimeInput, setShowCacheTimeInput] = useState(false);
    const [cacheTimeInput, setCacheTimeInput] = useState('');
    const [status, setStatus] = useState<string>('');
    const [isProcessing, setIsProcessing] = useState(false);
    const [tempFilePath, setTempFilePath] = useState<string>('');

    const config = loadAicodemirrorConfig();
    const isAicodemirrorEnv = checkAnthropicBaseUrl();

    // ÈîôËØØÂ§ÑÁêÜËæÖÂä©ÂáΩÊï∞
    const handleError = (action: string, error: unknown, stopProcessing = true) => {
        setStatus(`‚ùå ${action}Â§±Ë¥•: ${String(error)}`);
        if (stopProcessing)
            setIsProcessing(false);
    };

    const autoResetEnabled = config.autoResetEnabled ?? true;
    const menuItems = [
        { label: '‚úã ÊâãÂä®Ëé∑ÂèñCookie', value: 'manual-cookie', selectable: true },
        { label: `üîÑ Ëá™Âä®ÈáçÁΩÆÁßØÂàÜ: ${autoResetEnabled ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠'}`, value: 'toggle-auto-reset', selectable: true },
        ...(autoResetEnabled ? [{ label: '‚öôÔ∏è ËÆæÁΩÆËá™Âä®ÈáçÁΩÆÈòàÂÄº', value: 'set-threshold', selectable: true }] : []),
        { label: '‚è±Ô∏è ËÆæÁΩÆÁºìÂ≠òÂà∑Êñ∞Êó∂Èó¥', value: 'set-cache-time', selectable: true },
        { label: 'üßπ Ê∏ÖÈô§Êú¨Âú∞Cookie', value: 'clear-cookie', selectable: true },
        { label: 'üîô ËøîÂõû‰∏ªËèúÂçï', value: 'back', selectable: true }
    ];

    const manualCookieMenuItems = [
        { label: 'üåê aicodemirrorÊéßÂà∂Âè∞ÁôªÂΩï', value: 'console-login', selectable: true },
        { label: 'üìÑ ‰ªéÊñá‰ª∂Ëé∑ÂèñCookie', value: 'file-cookie', selectable: true },
        { label: 'üîô ËøîÂõû‰∏ä‰∏ÄÁ∫ß', value: 'back-to-main', selectable: true }
    ];

    const currentMenuItems = showManualCookieMenu ? manualCookieMenuItems : menuItems;
    const selectableItems = currentMenuItems.filter(item => item.selectable);

    useInput((input, key) => {
        if (showFileWait) {
            // Handle file input waiting state
            if (key.return || input === ' ') {
                void handleFileReadAndValidate();
            } else if (key.escape) {
                setShowFileWait(false);
                setStatus(''); // Clear status when canceling file input
            }
            return;
        }

        if (showThresholdInput) {
            // Handle threshold input - TextInput component handles most input
            if (key.escape) {
                setShowThresholdInput(false);
                setThresholdInput('');
                setStatus(''); // Clear status when canceling threshold input
            }
            return;
        }

        if (showCacheTimeInput) {
            // Handle cache time input - TextInput component handles most input
            if (key.escape) {
                setShowCacheTimeInput(false);
                setCacheTimeInput('');
                setStatus(''); // Clear status when canceling cache time input
            }
            return;
        }

        // Normal menu navigation
        if (key.upArrow) {
            setSelectedIndex(Math.max(0, selectedIndex - 1));
            // Clear status when navigating menu items
            if (status && !isProcessing) {
                setStatus('');
            }
        } else if (key.downArrow) {
            setSelectedIndex(Math.min(selectableItems.length - 1, selectedIndex + 1));
            // Clear status when navigating menu items
            if (status && !isProcessing) {
                setStatus('');
            }
        } else if (key.return) {
            const item = selectableItems[selectedIndex];
            if (item) {
                handleMenuSelect(item.value);
            }
        } else if (key.escape) {
            if (showManualCookieMenu) {
                // Â¶ÇÊûúÂú®Â≠êËèúÂçï‰∏≠ÔºåËøîÂõûÂà∞‰∏ªËèúÂçï
                handleBackToMain();
            } else {
                // Â¶ÇÊûúÂú®‰∏ªËèúÂçï‰∏≠ÔºåËøîÂõûÂà∞Áà∂Á∫ß
                onBack();
            }
        }
    });

    const handleMenuSelect = (value: string) => {
        setStatus(''); // Clear previous status

        switch (value) {
        case 'console-login':
            void handleConsoleLogin();
            break;
        case 'manual-cookie':
            handleManualCookie();
            break;
        case 'file-cookie':
            void handleFileCookie();
            break;
        case 'toggle-auto-reset':
            handleToggleAutoReset();
            break;
        case 'set-threshold':
            handleSetThreshold();
            break;
        case 'set-cache-time':
            handleSetCacheTime();
            break;
        case 'clear-cookie':
            handleClearCookie();
            break;
        case 'back-to-main':
            handleBackToMain();
            break;
        case 'back':
            cleanup();
            onBack();
            break;
        }
    };

    const handleConsoleLogin = async () => {
        setIsProcessing(true);
        setStatus('üöÄ ÂêØÂä®aicodemirrorÊéßÂà∂Âè∞ÁôªÂΩï...');

        try {
            const result = await launchBrowserLogin();

            if (result.success) {
                setStatus(result.message);
            } else {
                setStatus(`‚ö†Ô∏è ${result.message}`);
            }
        } catch (error) {
            handleError('ÊéßÂà∂Âè∞ÁôªÂΩï', error, false);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleManualCookie = () => {
        setShowManualCookieMenu(true);
        setSelectedIndex(0);
        setStatus(''); // Clear status when entering submenu
    };

    const handleBackToMain = () => {
        setShowManualCookieMenu(false);
        setSelectedIndex(0);
        setStatus(''); // Clear status when returning to main menu
    };

    const handleFileCookie = async () => {
        setIsProcessing(true);
        setStatus('üîç Ê£ÄÊü•Áé∞ÊúâCookieÁä∂ÊÄÅ...');

        try {
            // È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶Â∑≤ÊúâÊúâÊïàÁöÑCookie
            const config = loadAicodemirrorConfig();
            if (config.cookies) {
                setStatus('üîç È™åËØÅÁé∞ÊúâCookieÊúâÊïàÊÄß...');
                const existingCredits = await getCredits(config.cookies);

                if (existingCredits) {
                    setStatus(`‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàCookieÔºÅ

üìä ÂΩìÂâçÁä∂ÊÄÅÔºö
   ÁßØÂàÜ: ${existingCredits.credits}
   ËÆ°Âàí: ${existingCredits.plan}
   
üí° ÊÇ®Â∑≤ÊúâÊúâÊïàÁöÑCookieÔºåÊó†ÈúÄÈáçÊñ∞ËæìÂÖ•„ÄÇ
   Â¶ÇÈúÄÊõ¥Êç¢CookieÔºåËØ∑ÂÖàÈÄâÊã©"üßπ Ê∏ÖÈô§Êú¨Âú∞Cookie"ÔºåÁÑ∂ÂêéÈáçÊñ∞ËæìÂÖ•„ÄÇ`);
                    setIsProcessing(false);
                    return;
                }
            }

            // Ê≤°ÊúâÊúâÊïàCookieÔºåÁªßÁª≠Êñá‰ª∂Ëé∑ÂèñÊµÅÁ®ã
            setStatus('üìÑ Ê≠£Âú®ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂Áî®‰∫éCookieËé∑Âèñ...');
            const tempFile = join(tmpdir(), 'ccstatusline-cookie-get.txt');
            const instructionText = `ËØ∑Âú®Ê≠§Êñá‰ª∂‰∏≠Á≤òË¥¥ÊÇ®‰ªéÊµèËßàÂô®Ëé∑ÂèñÁöÑCookieÔºåÁÑ∂Âêé‰øùÂ≠òÂπ∂ÂÖ≥Èó≠Ôºö

CookieËé∑ÂèñÊ≠•È™§Ôºö
1. Âú®ÊµèËßàÂô®‰∏≠ÊåâF12ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑
2. ÂàáÊç¢Âà∞NetworkÊ†áÁ≠æÈ°µ 
3. Âà∑Êñ∞È°µÈù¢ÔºåÊâæÂà∞consoleËØ∑Ê±Ç
4. ÁÇπÂáªËØ•ËØ∑Ê±ÇÔºåÊü•ÁúãHeaders ‚Üí Request Headers
5. Â§çÂà∂Cookie:ÂêéÈù¢ÁöÑÂÆåÊï¥ÂÜÖÂÆπ
6. Á≤òË¥¥Âà∞‰∏ãÊñπÁ©∫Ë°åÔºå‰øùÂ≠òÊñá‰ª∂Âπ∂ÂÖ≥Èó≠ÁºñËæëÂô®

CookieÂÜÖÂÆπÔºàËØ∑Á≤òË¥¥Âà∞‰∏ã‰∏ÄË°åÔºâÔºö

`;

            writeFileSync(tempFile, instructionText);
            setTempFilePath(tempFile);

            // ÊâìÂºÄÁ≥ªÁªüÈªòËÆ§ÁºñËæëÂô®
            await openTextEditor(tempFile);

            // ÂàáÊç¢Âà∞Á≠âÂæÖÁä∂ÊÄÅ
            setShowFileWait(true);
            setIsProcessing(false);
            setStatus(`üìÑ Â∑≤ÊâìÂºÄÁºñËæëÂô®ÔºåËØ∑Êåâ‰ª•‰∏ãÊ≠•È™§Êìç‰ΩúÔºö

1. ‰ªéÊµèËßàÂô®ÊéßÂà∂Âè∞È°µÈù¢Ëé∑ÂèñÂÆåÊï¥ÁöÑCookie
2. Âú®ÁºñËæëÂô®‰∏≠Á≤òË¥¥CookieÂà∞ÊåáÂÆö‰ΩçÁΩÆ
3. ‰øùÂ≠òÊñá‰ª∂Âπ∂ÂÖ≥Èó≠ÁºñËæëÂô®
4. ÂõûÂà∞Ê≠§ÁïåÈù¢Êåâ Enter Êàñ Á©∫Ê†ºÈîÆÁªßÁª≠È™åËØÅ

‚ö†Ô∏è ‰∏çË¶ÅÂÖ≥Èó≠Ê≠§Á®ãÂ∫èÔºåÂÆåÊàêÁºñËæëÂêéËØ∑ÊåâÈîÆÁªßÁª≠...`);
        } catch (error) {
            handleError('Êñá‰ª∂Êìç‰Ωú', error);
        }
    };

    const handleFileReadAndValidate = async () => {
        setShowFileWait(false);
        setIsProcessing(true);
        setStatus('üîç Ê≠£Âú®ËØªÂèñCookieÊñá‰ª∂...');

        try {
            const tempFile = tempFilePath;

            // ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            if (existsSync(tempFile)) {
                const fileContent = readFileSync(tempFile, 'utf8');
                const lines = fileContent.split('\n');
                const cookieLine = lines.find(line => line.trim()
                    && !line.includes('ËØ∑Âú®Ê≠§Êñá‰ª∂')
                    && !line.includes('Â§çÂà∂Ê≠•È™§')
                    && !line.includes('CookieÂÜÖÂÆπ')
                    && line.length > 50
                );

                if (cookieLine) {
                    const cookie = cookieLine.trim();
                    setStatus(`üîç ÊâæÂà∞Cookie (${cookie.length} Â≠óÁ¨¶)ÔºåÊ≠£Âú®È™åËØÅ...`);
                    const result = await validateAndSaveCookie(cookie);
                    setStatus(result.message);

                    // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
                    try {
                        unlinkSync(tempFile);
                        setTempFilePath('');
                    } catch {
                        // ÂøΩÁï•Âà†Èô§ÈîôËØØ
                    }
                } else {
                    setStatus('‚ùå Êú™Âú®Êñá‰ª∂‰∏≠ÊâæÂà∞ÊúâÊïàÁöÑCookieÔºåËØ∑Á°Æ‰øùÂ∑≤Ê≠£Á°ÆÁ≤òË¥¥Âπ∂‰øùÂ≠òÊñá‰ª∂\n\nüí° Â¶ÇÈúÄÈáçËØïÔºåËØ∑ÈáçÊñ∞ÈÄâÊã©"‰ªéÊñá‰ª∂ËæìÂÖ•Cookie"');
                }
            } else {
                setStatus('‚ùå ‰∏¥Êó∂Êñá‰ª∂‰∏çÂ≠òÂú®ÔºåËØ∑ÈáçËØï');
            }
        } catch (error) {
            handleError('ËØªÂèñÊñá‰ª∂', error, false);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleToggleAutoReset = () => {
        try {
            setIsProcessing(true);
            const currentConfig = loadAicodemirrorConfig();
            const newAutoResetEnabled = !(currentConfig.autoResetEnabled ?? true);

            const updatedConfig = {
                ...currentConfig,
                autoResetEnabled: newAutoResetEnabled
            };

            saveAicodemirrorConfig(updatedConfig);

            if (newAutoResetEnabled) {
                setStatus('‚úÖ Ëá™Âä®ÈáçÁΩÆÁßØÂàÜÂ∑≤ÂºÄÂêØ');
                // Â¶ÇÊûúÂºÄÂêØËá™Âä®ÈáçÁΩÆ‰ΩÜÊ≤°ÊúâËÆæÁΩÆÈòàÂÄºÔºåÊèêÁ§∫ËÆæÁΩÆÈòàÂÄº
                if (!updatedConfig.creditThreshold) {
                    setTimeout(() => {
                        setStatus('üí° Âª∫ËÆÆËÆæÁΩÆËá™Âä®ÈáçÁΩÆÈòàÂÄº‰ª•Ëá™ÂÆö‰πâËß¶ÂèëÊù°‰ª∂');
                    }, 1500);
                }
            } else {
                setStatus('‚è∏Ô∏è Ëá™Âä®ÈáçÁΩÆÁßØÂàÜÂ∑≤ÂÖ≥Èó≠');
            }
        } catch (error) {
            handleError('ÂàáÊç¢Ëá™Âä®ÈáçÁΩÆÁä∂ÊÄÅ', error);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleSetThreshold = () => {
        const currentThreshold = config.creditThreshold ?? 200;
        setThresholdInput(currentThreshold.toString());
        setShowThresholdInput(true);
        setStatus(`üîß ËÆæÁΩÆËá™Âä®ÈáçÁΩÆÈòàÂÄº (ÂΩìÂâç: ${currentThreshold})`);
    };

    const handleThresholdSubmitAsync = async (value: string) => {
        setShowThresholdInput(false);
        setIsProcessing(true);
        setStatus('üîÑ Ê≠£Âú®‰øùÂ≠òÈòàÂÄºËÆæÁΩÆ...');

        try {
            const threshold = parseInt(value.trim(), 10);

            if (isNaN(threshold) || threshold < 0) {
                setStatus('‚ùå ÈòàÂÄºÂøÖÈ°ªÊòØÈùûË¥üÊï¥Êï∞');
                setIsProcessing(false);
                return;
            }

            // Êõ¥Êñ∞ÈÖçÁΩÆ
            const updatedConfig = {
                ...config,
                creditThreshold: threshold,
                autoResetEnabled: true
            };
            saveAicodemirrorConfig(updatedConfig);

            setStatus(`‚úÖ Ëá™Âä®ÈáçÁΩÆÁßØÂàÜÈòàÂÄºÂ∑≤ËÆæÁΩÆ‰∏∫: ${threshold}

üí° ÂΩìÁßØÂàÜ‰Ωé‰∫éÊ≠§ÈòàÂÄºÊó∂ÔºåÁ≥ªÁªüÂ∞ÜËá™Âä®Ëß¶ÂèëÁßØÂàÜÈáçÁΩÆ`);

            // Â¶ÇÊûúÊúâCookieÔºåÊòæÁ§∫ÂΩìÂâçÁßØÂàÜÁä∂ÊÄÅ
            if (config.cookies) {
                const creditsData = await getCredits(config.cookies);
                if (creditsData) {
                    const statusMsg = `‚úÖ Ëá™Âä®ÈáçÁΩÆÁßØÂàÜÈòàÂÄºÂ∑≤ËÆæÁΩÆ‰∏∫: ${threshold}

üìä ÂΩìÂâçÁßØÂàÜÁä∂ÊÄÅÔºö${creditsData.credits} (${creditsData.plan})

${creditsData.credits < threshold
    ? '‚ö†Ô∏è ÂΩìÂâçÁßØÂàÜÂ∑≤‰Ωé‰∫éÈòàÂÄºÔºå‰∏ãÊ¨°Âà∑Êñ∞Êó∂Â∞ÜËá™Âä®ÈáçÁΩÆ'
    : '‚úÖ ÂΩìÂâçÁßØÂàÜÈ´ò‰∫éÈòàÂÄº'}

üí° ÂΩìÁßØÂàÜ‰Ωé‰∫éÊ≠§ÈòàÂÄºÊó∂ÔºåÁ≥ªÁªüÂ∞ÜËá™Âä®Ëß¶ÂèëÁßØÂàÜÈáçÁΩÆ`;
                    setStatus(statusMsg);
                }
            }
        } catch (error) {
            handleError('ËÆæÁΩÆÈòàÂÄº', error, false);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleThresholdSubmit = (value: string) => {
        void handleThresholdSubmitAsync(value);
    };

    const handleSetCacheTime = () => {
        const currentCacheTime = config.cacheDuration ?? 30;
        setCacheTimeInput(currentCacheTime.toString());
        setShowCacheTimeInput(true);
        setStatus(`‚è±Ô∏è ËÆæÁΩÆÁßØÂàÜÁºìÂ≠òÊó∂Èó¥ (ÂΩìÂâç: ${currentCacheTime}Áßí)`);
    };

    const handleCacheTimeSubmitAsync = (value: string) => {
        setShowCacheTimeInput(false);
        setIsProcessing(true);
        setStatus('üîÑ Ê≠£Âú®‰øùÂ≠òÁºìÂ≠òÊó∂Èó¥ËÆæÁΩÆ...');

        try {
            const cacheTime = parseInt(value.trim(), 10);

            if (isNaN(cacheTime) || cacheTime < 5) {
                setStatus('‚ùå ÁºìÂ≠òÊó∂Èó¥ÂøÖÈ°ªÊòØËá≥Â∞ë5ÁßíÁöÑÊï¥Êï∞');
                setIsProcessing(false);
                return;
            }

            // Êõ¥Êñ∞ÈÖçÁΩÆ
            const updatedConfig = {
                ...config,
                cacheDuration: cacheTime
            };
            saveAicodemirrorConfig(updatedConfig);

            setStatus(`‚úÖ ÁßØÂàÜÁºìÂ≠òÊó∂Èó¥Â∑≤ËÆæÁΩÆ‰∏∫: ${cacheTime}Áßí

üí° ÁßØÂàÜ‰ø°ÊÅØÂ∞ÜÂú®${cacheTime}ÁßíÂÜÖ‰øùÊåÅÁºìÂ≠òÔºåÂáèÂ∞ëAPIË∞ÉÁî®È¢ëÁéá`);
        } catch (error) {
            handleError('ËÆæÁΩÆÁºìÂ≠òÊó∂Èó¥', error, false);
        } finally {
            setIsProcessing(false);
        }
    };

    const handleCacheTimeSubmit = (value: string) => {
        handleCacheTimeSubmitAsync(value);
    };

    const handleClearCookie = () => {
        const newConfig = {
            ...config,
            cookies: '', // Ê∏ÖÈô§Cookie
            cachedCredits: undefined, // Ê∏ÖÈô§ÁºìÂ≠òÁöÑÁßØÂàÜÊï∞ÊçÆ
            lastCreditRefresh: undefined // Ê∏ÖÈô§ÊúÄÂêéÂà∑Êñ∞Êó∂Èó¥
        };
        saveAicodemirrorConfig(newConfig);
        setStatus('‚úÖ Êú¨Âú∞CookieÂ∑≤Ê∏ÖÈô§');
    };

    const getDescription = (value: string): string => {
        const mainDescriptions: Record<string, string> = {
            'manual-cookie': 'Êèê‰æõÊâãÂä®Ëé∑ÂèñCookieÁöÑÊñπÂºè',
            'toggle-auto-reset': `${autoResetEnabled ? 'ÂÖ≥Èó≠' : 'ÂºÄÂêØ'}Ëá™Âä®ÈáçÁΩÆÁßØÂàÜÂäüËÉΩ`,
            'set-threshold': `ËÆæÁΩÆËá™Âä®ÈáçÁΩÆÁßØÂàÜÁöÑËß¶ÂèëÈòàÂÄº (ÂΩìÂâç: ${config.creditThreshold ?? 200})`,
            'set-cache-time': `ËÆæÁΩÆÁßØÂàÜ‰ø°ÊÅØÁöÑÁºìÂ≠òÊó∂Èó¥ (ÂΩìÂâç: ${config.cacheDuration ?? 30}Áßí)`,
            'clear-cookie': 'Ê∏ÖÈô§Êú¨Âú∞‰øùÂ≠òÁöÑCookie',
            'back': 'ËøîÂõûÂà∞‰∏ªËèúÂçï'
        };

        const manualCookieDescriptions: Record<string, string> = {
            'console-login': 'ÊâìÂºÄaicodemirrorÊéßÂà∂Âè∞È°µÈù¢ÔºåÈÄöËøáNetworkÈù¢ÊùøËé∑ÂèñÂáÜÁ°ÆÁöÑCookie',
            'file-cookie': 'ÈÄöËøáÊñáÊú¨ÁºñËæëÂô®‰ªéÊñá‰ª∂Ëé∑ÂèñCookie',
            'back-to-main': 'ËøîÂõûÂà∞‰∏ä‰∏ÄÁ∫ßËèúÂçï'
        };

        const descriptions = showManualCookieMenu ? manualCookieDescriptions : mainDescriptions;
        return descriptions[value] ?? '';
    };

    const selectedItem = selectableItems[selectedIndex];
    const description = selectedItem ? getDescription(selectedItem.value) : '';

    return (
        <Box flexDirection='column'>
            <Text bold>{showManualCookieMenu ? 'ÊâãÂä®Ëé∑ÂèñCookie' : 'Aicodemirror Configuration'}</Text>

            {!isAicodemirrorEnv && (
                <Box marginTop={1} marginBottom={1}>
                    <Text color='yellow'>
                        ‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ aicodemirror ÁéØÂ¢ÉÔºåËØ∑ËÆæÁΩÆ ANTHROPIC_BASE_URL
                    </Text>
                </Box>
            )}

            {config.cookies && (
                <Box marginTop={1}>
                    <Text color='green'>
                        ‚úÖ CookieÂ∑≤ÈÖçÁΩÆ (ÈïøÂ∫¶:
                        {' '}
                        {config.cookies.length}
                        {' '}
                        Â≠óÁ¨¶)
                    </Text>
                </Box>
            )}

            <Box marginTop={1}>
                <Text color='cyan'>
                    ‚öôÔ∏è Ëá™Âä®ÈáçÁΩÆÈòàÂÄº:
                    {' '}
                    {config.creditThreshold ?? 200}
                    {' '}
                    (
                    {(config.autoResetEnabled ?? true) ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}
                    )
                </Text>
            </Box>

            <Box marginTop={1}>
                <Text color='cyan'>
                    ‚è±Ô∏è ÁßØÂàÜÁºìÂ≠òÊó∂Èó¥:
                    {' '}
                    {config.cacheDuration ?? 30}
                    Áßí
                </Text>
            </Box>

            <Box marginTop={1} flexDirection='column'>
                {showFileWait ? (
                    <Box flexDirection='column'>
                        <Text color='cyan' bold>üìù Á≠âÂæÖÊñá‰ª∂ÁºñËæëÂÆåÊàê...</Text>
                        <Text> </Text>
                        <Text dimColor>ËØ∑Âú®ÊâìÂºÄÁöÑÁºñËæëÂô®‰∏≠ÂÆåÊàê‰ª•‰∏ãÊ≠•È™§Ôºö</Text>
                        <Text dimColor>1. Á≤òË¥¥ÂÆåÊï¥ÁöÑCookieÂà∞Êñá‰ª∂‰∏≠</Text>
                        <Text dimColor>2. ‰øùÂ≠òÊñá‰ª∂ (Ctrl+S)</Text>
                        <Text dimColor>3. ÂÖ≥Èó≠ÁºñËæëÂô®</Text>
                        <Text dimColor>4. ËøîÂõûÊ≠§ÁïåÈù¢</Text>
                        <Text> </Text>
                        <Text color='green'>‚úì ÁºñËæëÂÆåÊàêÂêéÔºåÊåâ Enter Êàñ Á©∫Ê†ºÈîÆ È™åËØÅCookie</Text>
                        <Text color='yellow'>‚úó Êåâ Esc ÂèñÊ∂àÊìç‰Ωú</Text>
                    </Box>
                ) : showThresholdInput ? (
                    <Box flexDirection='column'>
                        <Text color='cyan' bold>‚öôÔ∏è ËÆæÁΩÆËá™Âä®ÈáçÁΩÆÈòàÂÄº</Text>
                        <Text> </Text>
                        <Text dimColor>ËØ∑ËæìÂÖ•ÁßØÂàÜÈòàÂÄºÔºàÈùûË¥üÊï¥Êï∞ÔºâÔºö</Text>
                        <Box marginTop={1}>
                            <Text>ÈòàÂÄº: </Text>
                            <TextInput
                                value={thresholdInput}
                                onChange={setThresholdInput}
                                onSubmit={handleThresholdSubmit}
                                placeholder='200'
                            />
                        </Box>
                        <Text> </Text>
                        <Text dimColor>üí° ÂΩìÁßØÂàÜ‰Ωé‰∫éÊ≠§ÈòàÂÄºÊó∂ÔºåÁ≥ªÁªüÂ∞ÜËá™Âä®Ëß¶ÂèëÁßØÂàÜÈáçÁΩÆ</Text>
                        <Text color='green'>‚úì ËæìÂÖ•ÂÆåÊàêÂêéÊåâ Enter Á°ÆËÆ§</Text>
                        <Text color='yellow'>‚úó Êåâ Esc ÂèñÊ∂à</Text>
                    </Box>
                ) : showCacheTimeInput ? (
                    <Box flexDirection='column'>
                        <Text color='cyan' bold>‚è±Ô∏è ËÆæÁΩÆÁßØÂàÜÁºìÂ≠òÊó∂Èó¥</Text>
                        <Text> </Text>
                        <Text dimColor>ËØ∑ËæìÂÖ•ÁºìÂ≠òÊó∂Èó¥ÔºàËá≥Â∞ë5ÁßíÔºâÔºö</Text>
                        <Box marginTop={1}>
                            <Text>Êó∂Èó¥: </Text>
                            <TextInput
                                value={cacheTimeInput}
                                onChange={setCacheTimeInput}
                                onSubmit={handleCacheTimeSubmit}
                                placeholder='30'
                            />
                            <Text> Áßí</Text>
                        </Box>
                        <Text> </Text>
                        <Text dimColor>üí° ÁßØÂàÜ‰ø°ÊÅØÂ∞ÜÂú®ÊåáÂÆöÊó∂Èó¥ÂÜÖ‰øùÊåÅÁºìÂ≠òÔºåÂáèÂ∞ëAPIË∞ÉÁî®È¢ëÁéá</Text>
                        <Text color='green'>‚úì ËæìÂÖ•ÂÆåÊàêÂêéÊåâ Enter Á°ÆËÆ§</Text>
                        <Text color='yellow'>‚úó Êåâ Esc ÂèñÊ∂à</Text>
                    </Box>
                ) : (
                    currentMenuItems.map((item, idx) => {
                        if (!item.selectable && item.value.startsWith('_gap')) {
                            return <Text key={item.value}> </Text>;
                        }
                        const selectableIdx = selectableItems.indexOf(item);
                        const isSelected = selectableIdx === selectedIndex;

                        return (
                            <Text
                                key={item.value}
                                color={isSelected ? 'green' : undefined}
                            >
                                {isSelected ? `${getCompatibleChar('‚ñ∂', '>')}  ` : '   '}
                                {item.label}
                            </Text>
                        );
                    })
                )}
            </Box>

            {status && (
                <Box marginTop={1}>
                    <Text>{status}</Text>
                </Box>
            )}

            {description && !showFileWait && !showThresholdInput && (
                <Box marginTop={1} paddingLeft={2}>
                    <Text dimColor wrap='wrap'>{description}</Text>
                </Box>
            )}

            {!showFileWait && !showThresholdInput && !isProcessing && (
                <Box marginTop={1}>
                    <Text dimColor>‰ΩøÁî®ÊñπÂêëÈîÆÂØºËà™ÔºåEnterÈÄâÊã©ÔºåEscËøîÂõû</Text>
                </Box>
            )}

            {isProcessing && (
                <Box marginTop={1}>
                    <Text color='yellow'>üîÑ Â§ÑÁêÜ‰∏≠...</Text>
                </Box>
            )}
        </Box>
    );
};